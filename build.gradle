import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile(name: "Engine-system-debug-4.0.0", ext: 'aar')
    compile(name: "uexFileMgr-debug", ext: 'aar')
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    defaultConfig {
        minSdkVersion 14
        applicationId 'org.zywx.wbpalmstar.widgetone.uexxmlhttpmgr'
    }
    productFlavors {
    }
}


//-----------------------------------以下为生成插件Zip包部分---------------------------------

def pluginName = project.name
def projectDir=project.getProjectDir().absolutePath
def jarDir = pluginName + '/jar/'
def jarName = "plugin_" + pluginName + ".jar"
def jarPath = jarDir + jarName

task clearJar(type: Delete) {
    delete jarPath;
}

task buildPlugin(type: Jar, dependsOn: ['compileReleaseJavaWithJavac']) {
    def applicationId = getApplicationId();
    archiveName jarName
    from('build/intermediates/classes/release/')
    destinationDir = file(jarDir)
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('**/BuildConfig.class')
    if (applicationId != null) {
        exclude(applicationId.replace('.', '/'))
    }
}

buildPlugin.dependsOn(clearJar)

//获取应用Id
def getApplicationId() {
    return getAndroidPlugin().extension.defaultConfig.applicationId;
}

def getAndroidPlugin(){
    def plugin = project.plugins.findPlugin('com.android.application') ?:
            project.plugins.findPlugin('com.android.library')
    return plugin as com.android.build.gradle.BasePlugin
}

//获取插件版本号
def getPluginVersion(String pluginName) {
    def version = ''
    Pattern p = Pattern.compile("version=\"(.*?)\"")
    Matcher m = p.matcher(new File(project.getProjectDir(), pluginName + "/info.xml")
            .getText('UTF-8'))
    m.find()
    if (m.find()) {
        version = m.group(1)
        println(pluginName + " version: " + version)
    }
    return version
}

def dexJarsStr="";

buildPlugin.doLast{
    dexJarsStr=getDexJars(pluginName)
    def dexJarTask=tasks.create("buildPluginTemp",Exec){
        workingDir "./$pluginName"
        def androidSDKDir = getAndroidPlugin().sdkHandler.getSdkFolder().absolutePath
        def androidToolDir=androidSDKDir+'/build-tools/'+"${android.buildToolsVersion}"+'/'
        def command=androidToolDir+"dx --dex --verbose --no-strict " +
                "--output=dex/plugin_${pluginName}_dex.jar " +
                "jar/plugin_uexXmlHttpMgr.jar"
        println(command)
        commandLine androidToolDir+"dx","--dex","--verbose","--no-strict","--output=dex/plugin_${pluginName}_dex.jar",
                "${dexJarsStr}"
        standardOutput = new ByteArrayOutputStream()
    }
    dexJarTask.doFirst{
        println '== dexJars start=='
        File dexDir=new File(projectDir,"$pluginName/dex")
        if (!dexDir.exists()){
            dexDir.mkdir()
        }
    }
    dexJarTask.doLast{
        println standardOutput
        println '== dexJars  end=='
        def zipTask=tasks.findByName("zipPlugin")
        zipTask.execute()
    }
    dexJarTask.execute()
}

def getDexJars(def pluginName){
    def dexJars=""
    new File("$pluginName/jar").listFiles().each { file ->
        dexJars+=(" "+file.absolutePath)
    }
    return dexJars.substring(1,dexJars.length())
}

//生成插件包
task zipPlugin(type: Zip) {
    baseName pluginName + "-" + getPluginVersion(pluginName)
    from(pluginName)
    into(pluginName)
    destinationDir = file('.');
}